
// automatically generated by rust-bindgen

// #![allow(non_camel_case_types)]
extern crate libc;
use libc::c_int;
use libc::c_char;
use libc::c_void;
use std::ffi::CString;

pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type clingo_literal_t = int32_t;
pub type clingo_atom_t = uint32_t;
pub type clingo_id_t = uint32_t;
pub type clingo_weight_t = int32_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_error {
    clingo_error_success = 0,
    clingo_error_runtime = 1,
    clingo_error_logic = 2,
    clingo_error_bad_alloc = 3,
    clingo_error_unknown = 4,
}
pub type clingo_error_t = c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_warning {
    clingo_warning_operation_undefined = 0,
    clingo_warning_runtime_error = 1,
    clingo_warning_atom_undefined = 2,
    clingo_warning_file_included = 3,
    clingo_warning_variable_unbounded = 4,
    clingo_warning_global_variable = 5,
    clingo_warning_other = 6,
}
pub type clingo_warning_t = c_int;
pub type clingo_logger_t =
    ::std::option::Option<unsafe extern "C" fn(code: clingo_warning_t,
                                                 message: *const c_char,
                                                 data: *mut c_void
)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_truth_value {
    clingo_truth_value_free = 0,
    clingo_truth_value_true = 1,
    clingo_truth_value_false = 2,
}
pub type clingo_truth_value_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_location {
    pub begin_file: *const c_char,
    pub end_file: *const c_char,
    pub begin_line: size_t,
    pub end_line: size_t,
    pub begin_column: size_t,
    pub end_column: size_t,
}
impl ::std::default::Default for clingo_location {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_location_t = clingo_location;
pub type clingo_signature_t = uint64_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_symbol_type {
    clingo_symbol_type_infimum = 0,
    clingo_symbol_type_number = 1,
    clingo_symbol_type_string = 4,
    clingo_symbol_type_function = 5,
    clingo_symbol_type_supremum = 7,
}
pub type clingo_symbol_type_t = c_int;
pub type clingo_symbol_t = uint64_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_symbolic_literal {
    pub symbol: clingo_symbol_t,
    pub positive: u8,
    _bindgen_padding_0_: [u8; 7usize],
}
impl ::std::default::Default for clingo_symbolic_literal {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_symbolic_literal_t = clingo_symbolic_literal;
pub enum clingo_solve_control { }
pub type clingo_solve_control_t = clingo_solve_control;
pub enum clingo_model { }
pub type clingo_model_t = clingo_model;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_model_type {
    clingo_model_type_stable_model = 0,
    clingo_model_type_brave_consequences = 1,
    clingo_model_type_cautious_consequences = 2,
}
pub type clingo_model_type_t = c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_show_type {
    clingo_show_type_csp = 1,
    clingo_show_type_shown = 2,
    clingo_show_type_atoms = 4,
    clingo_show_type_terms = 8,
    clingo_show_type_extra = 16,
    clingo_show_type_all = 31,
    clingo_show_type_complement = 32,
}
pub type clingo_show_type_bitset_t = ::std::os::raw::c_uint;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_solve_result {
    clingo_solve_result_satisfiable = 1,
    clingo_solve_result_unsatisfiable = 2,
    clingo_solve_result_exhausted = 4,
    clingo_solve_result_interrupted = 8,
}
pub type clingo_solve_result_bitset_t = ::std::os::raw::c_uint;
pub enum clingo_solve_iteratively { }
pub type clingo_solve_iteratively_t = clingo_solve_iteratively;
pub enum clingo_solve_async { }
pub type clingo_solve_async_t = clingo_solve_async;
pub enum clingo_symbolic_atoms { }
pub type clingo_symbolic_atoms_t = clingo_symbolic_atoms;
pub type clingo_symbolic_atom_iterator_t = uint64_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_theory_term_type {
    clingo_theory_term_type_tuple = 0,
    clingo_theory_term_type_list = 1,
    clingo_theory_term_type_set = 2,
    clingo_theory_term_type_function = 3,
    clingo_theory_term_type_number = 4,
    clingo_theory_term_type_symbol = 5,
}
pub type clingo_theory_term_type_t = c_int;
pub enum clingo_theory_atoms { }
pub type clingo_theory_atoms_t = clingo_theory_atoms;
pub enum clingo_propagate_init { }
pub type clingo_propagate_init_t = clingo_propagate_init;
pub enum clingo_assignment { }
pub type clingo_assignment_t = clingo_assignment;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_clause_type {
    clingo_clause_type_learnt = 0,
    clingo_clause_type_static = 1,
    clingo_clause_type_volatile = 2,
    clingo_clause_type_volatile_static = 3,
}
pub type clingo_clause_type_t = c_int;
pub enum clingo_propagate_control { }
pub type clingo_propagate_control_t = clingo_propagate_control;
pub type clingo_propagator_init_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut clingo_propagate_init_t,
                                                 arg2: *mut c_void)
                                                 -> u8>;
pub type clingo_propagator_propagate_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut clingo_propagate_control_t,
                                                 arg2: *const clingo_literal_t,
                                                 arg3: size_t,
                                                 arg4: *mut c_void)
                                                 -> u8>;
pub type clingo_propagator_undo_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut clingo_propagate_control_t,
                                                 arg2: *const clingo_literal_t,
                                                 arg3: size_t,
                                                 arg4: *mut c_void)
                                                 -> u8>;
pub type clingo_propagator_check_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut clingo_propagate_control_t,
                                                 arg2: *mut c_void)
                                                 -> u8>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_propagator {
    pub init: ::std::option::Option<unsafe extern "C" fn(control: *mut clingo_propagate_init_t,
                                                         data: *mut c_void)
                                        -> u8>,
    pub propagate: ::std::option::Option<unsafe extern "C" fn(control: *mut clingo_propagate_control_t,
                                                              changes: *const clingo_literal_t,
                                                              size: size_t,
                                                              data: *mut c_void)
                                             -> u8>,
    pub undo: ::std::option::Option<unsafe extern "C" fn(control: *mut clingo_propagate_control_t,
                                                         changes: *const clingo_literal_t,
                                                         size: size_t,
                                                         data: *mut c_void)
                                        -> u8>,
    pub check: ::std::option::Option<unsafe extern "C" fn(control: *mut clingo_propagate_control_t,
                                                          data: *mut c_void)
                                         -> u8>,
}
impl ::std::default::Default for clingo_propagator {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_propagator_t = clingo_propagator;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_heuristic_type {
    clingo_heuristic_type_level = 0,
    clingo_heuristic_type_sign = 1,
    clingo_heuristic_type_factor = 2,
    clingo_heuristic_type_init = 3,
    clingo_heuristic_type_true = 4,
    clingo_heuristic_type_false = 5,
}
pub type clingo_heuristic_type_t = c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_external_type {
    clingo_external_type_free = 0,
    clingo_external_type_true = 1,
    clingo_external_type_false = 2,
    clingo_external_type_release = 3,
}
pub type clingo_external_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_weighted_literal {
    pub literal: clingo_literal_t,
    pub weight: clingo_weight_t,
}
impl ::std::default::Default for clingo_weighted_literal {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_weighted_literal_t = clingo_weighted_literal;
pub enum clingo_backend { }
pub type clingo_backend_t = clingo_backend;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_configuration_type {
    clingo_configuration_type_value = 1,
    clingo_configuration_type_array = 2,
    clingo_configuration_type_map = 4,
}
pub type clingo_configuration_type_bitset_t = ::std::os::raw::c_uint;
pub enum clingo_configuration { }
pub type clingo_configuration_t = clingo_configuration;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_statistics_type {
    clingo_statistics_type_empty = 0,
    clingo_statistics_type_value = 1,
    clingo_statistics_type_array = 2,
    clingo_statistics_type_map = 3,
}
pub type clingo_statistics_type_t = c_int;
pub enum clingo_statistic { }
pub type clingo_statistics_t = clingo_statistic;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_comparison_operator {
    clingo_ast_comparison_operator_greater_than = 0,
    clingo_ast_comparison_operator_less_than = 1,
    clingo_ast_comparison_operator_less_equal = 2,
    clingo_ast_comparison_operator_greater_equal = 3,
    clingo_ast_comparison_operator_not_equal = 4,
    clingo_ast_comparison_operator_equal = 5,
}
pub type clingo_ast_comparison_operator_t = c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_sign {
    clingo_ast_sign_none = 0,
    clingo_ast_sign_negation = 1,
    clingo_ast_sign_double_negation = 2,
}
pub type clingo_ast_sign_t = c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_term_type {
    clingo_ast_term_type_symbol = 0,
    clingo_ast_term_type_variable = 1,
    clingo_ast_term_type_unary_operation = 2,
    clingo_ast_term_type_binary_operation = 3,
    clingo_ast_term_type_interval = 4,
    clingo_ast_term_type_function = 5,
    clingo_ast_term_type_external_function = 6,
    clingo_ast_term_type_pool = 7,
}
pub type clingo_ast_term_type_t = c_int;
pub type clingo_ast_unary_operation_t = clingo_ast_unary_operation;
pub type clingo_ast_binary_operation_t = clingo_ast_binary_operation;
pub type clingo_ast_interval_t = clingo_ast_interval;
pub type clingo_ast_function_t = clingo_ast_function;
pub type clingo_ast_pool_t = clingo_ast_pool;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_term {
    pub location: clingo_location_t,
    pub type_: clingo_ast_term_type_t,
    pub _bindgen_data_1_: [u64; 1usize],
}
impl clingo_ast_term {
    pub unsafe fn symbol(&mut self) -> *mut clingo_symbol_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn variable(&mut self) -> *mut *const c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn unary_operation(&mut self) -> *mut *const clingo_ast_unary_operation_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn binary_operation(&mut self) -> *mut *const clingo_ast_binary_operation_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn interval(&mut self) -> *mut *const clingo_ast_interval_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn function(&mut self) -> *mut *const clingo_ast_function_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn external_function(&mut self) -> *mut *const clingo_ast_function_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pool(&mut self) -> *mut *const clingo_ast_pool_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for clingo_ast_term {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_term_t = clingo_ast_term;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_unary_operator {
    clingo_ast_unary_operator_minus = 0,
    clingo_ast_unary_operator_negation = 1,
    clingo_ast_unary_operator_absolute = 2,
}
pub type clingo_ast_unary_operator_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_unary_operation {
    pub unary_operator: clingo_ast_unary_operator_t,
    pub argument: clingo_ast_term_t,
}
impl ::std::default::Default for clingo_ast_unary_operation {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_binary_operator {
    clingo_ast_binary_operator_xor = 0,
    clingo_ast_binary_operator_or = 1,
    clingo_ast_binary_operator_and = 2,
    clingo_ast_binary_operator_plus = 3,
    clingo_ast_binary_operator_minus = 4,
    clingo_ast_binary_operator_multiplication = 5,
    clingo_ast_binary_operator_division = 6,
    clingo_ast_binary_operator_modulo = 7,
}
pub type clingo_ast_binary_operator_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_binary_operation {
    pub binary_operator: clingo_ast_binary_operator_t,
    pub left: clingo_ast_term_t,
    pub right: clingo_ast_term_t,
}
impl ::std::default::Default for clingo_ast_binary_operation {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_interval {
    pub left: clingo_ast_term_t,
    pub right: clingo_ast_term_t,
}
impl ::std::default::Default for clingo_ast_interval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_function {
    pub name: *const c_char,
    pub arguments: *mut clingo_ast_term_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_function {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_pool {
    pub arguments: *mut clingo_ast_term_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_pool {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_csp_product_term {
    pub location: clingo_location_t,
    pub coefficient: clingo_ast_term_t,
    pub variable: *const clingo_ast_term_t,
}
impl ::std::default::Default for clingo_ast_csp_product_term {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_csp_product_term_t = clingo_ast_csp_product_term;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_csp_sum_term {
    pub location: clingo_location_t,
    pub terms: *mut clingo_ast_csp_product_term_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_csp_sum_term {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_csp_sum_term_t = clingo_ast_csp_sum_term;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_csp_guard {
    pub comparison: clingo_ast_comparison_operator_t,
    pub term: clingo_ast_csp_sum_term_t,
}
impl ::std::default::Default for clingo_ast_csp_guard {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_csp_guard_t = clingo_ast_csp_guard;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_csp_literal {
    pub term: clingo_ast_csp_sum_term_t,
    pub guards: *const clingo_ast_csp_guard_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_csp_literal {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_csp_literal_t = clingo_ast_csp_literal;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_id {
    pub location: clingo_location_t,
    pub id: *const c_char,
}
impl ::std::default::Default for clingo_ast_id {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_id_t = clingo_ast_id;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_comparison {
    pub comparison: clingo_ast_comparison_operator_t,
    pub left: clingo_ast_term_t,
    pub right: clingo_ast_term_t,
}
impl ::std::default::Default for clingo_ast_comparison {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_comparison_t = clingo_ast_comparison;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_literal_type {
    clingo_ast_literal_type_boolean = 0,
    clingo_ast_literal_type_symbolic = 1,
    clingo_ast_literal_type_comparison = 2,
    clingo_ast_literal_type_csp = 3,
}
pub type clingo_ast_literal_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_literal {
    pub location: clingo_location_t,
    pub sign: clingo_ast_sign_t,
    pub type_: clingo_ast_literal_type_t,
    pub _bindgen_data_1_: [u64; 1usize],
}
impl clingo_ast_literal {
    pub unsafe fn boolean(&mut self) -> *mut u8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn symbol(&mut self) -> *mut *const clingo_ast_term_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn comparison(&mut self) -> *mut *const clingo_ast_comparison_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn csp_literal(&mut self) -> *mut *const clingo_ast_csp_literal_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for clingo_ast_literal {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_literal_t = clingo_ast_literal;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_aggregate_function {
    clingo_ast_aggregate_function_count = 0,
    clingo_ast_aggregate_function_sum = 1,
    clingo_ast_aggregate_function_sump = 2,
    clingo_ast_aggregate_function_min = 3,
    clingo_ast_aggregate_function_max = 4,
}
pub type clingo_ast_aggregate_function_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_aggregate_guard {
    pub comparison: clingo_ast_comparison_operator_t,
    pub term: clingo_ast_term_t,
}
impl ::std::default::Default for clingo_ast_aggregate_guard {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_aggregate_guard_t = clingo_ast_aggregate_guard;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_conditional_literal {
    pub literal: clingo_ast_literal_t,
    pub condition: *const clingo_ast_literal_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_conditional_literal {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_conditional_literal_t = clingo_ast_conditional_literal;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_aggregate {
    pub elements: *const clingo_ast_conditional_literal_t,
    pub size: size_t,
    pub left_guard: *const clingo_ast_aggregate_guard_t,
    pub right_guard: *const clingo_ast_aggregate_guard_t,
}
impl ::std::default::Default for clingo_ast_aggregate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_aggregate_t = clingo_ast_aggregate;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_body_aggregate_element {
    pub tuple: *mut clingo_ast_term_t,
    pub tuple_size: size_t,
    pub condition: *const clingo_ast_literal_t,
    pub condition_size: size_t,
}
impl ::std::default::Default for clingo_ast_body_aggregate_element {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_body_aggregate_element_t = clingo_ast_body_aggregate_element;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_body_aggregate {
    pub function: clingo_ast_aggregate_function_t,
    pub elements: *const clingo_ast_body_aggregate_element_t,
    pub size: size_t,
    pub left_guard: *const clingo_ast_aggregate_guard_t,
    pub right_guard: *const clingo_ast_aggregate_guard_t,
}
impl ::std::default::Default for clingo_ast_body_aggregate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_body_aggregate_t = clingo_ast_body_aggregate;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_head_aggregate_element {
    pub tuple: *const clingo_ast_term_t,
    pub tuple_size: size_t,
    pub conditional_literal: clingo_ast_conditional_literal_t,
}
impl ::std::default::Default for clingo_ast_head_aggregate_element {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_head_aggregate_element_t = clingo_ast_head_aggregate_element;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_head_aggregate {
    pub function: clingo_ast_aggregate_function_t,
    pub elements: *const clingo_ast_head_aggregate_element_t,
    pub size: size_t,
    pub left_guard: *const clingo_ast_aggregate_guard_t,
    pub right_guard: *const clingo_ast_aggregate_guard_t,
}
impl ::std::default::Default for clingo_ast_head_aggregate {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_head_aggregate_t = clingo_ast_head_aggregate;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_disjunction {
    pub elements: *const clingo_ast_conditional_literal_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_disjunction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_disjunction_t = clingo_ast_disjunction;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_disjoint_element {
    pub location: clingo_location_t,
    pub tuple: *const clingo_ast_term_t,
    pub tuple_size: size_t,
    pub term: clingo_ast_csp_sum_term_t,
    pub condition: *const clingo_ast_literal_t,
    pub condition_size: size_t,
}
impl ::std::default::Default for clingo_ast_disjoint_element {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_disjoint_element_t = clingo_ast_disjoint_element;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_disjoint {
    pub elements: *const clingo_ast_disjoint_element_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_disjoint {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_disjoint_t = clingo_ast_disjoint;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_theory_term_type {
    clingo_ast_theory_term_type_symbol = 0,
    clingo_ast_theory_term_type_variable = 1,
    clingo_ast_theory_term_type_tuple = 2,
    clingo_ast_theory_term_type_list = 3,
    clingo_ast_theory_term_type_set = 4,
    clingo_ast_theory_term_type_function = 5,
    clingo_ast_theory_term_type_unparsed_term = 6,
}
pub type clingo_ast_theory_term_type_t = c_int;
pub type clingo_ast_theory_function_t = clingo_ast_theory_function;
pub type clingo_ast_theory_term_array_t = clingo_ast_theory_term_array;
pub type clingo_ast_theory_unparsed_term_t = clingo_ast_theory_unparsed_term;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_term {
    pub location: clingo_location_t,
    pub type_: clingo_ast_theory_term_type_t,
    pub _bindgen_data_1_: [u64; 1usize],
}
impl clingo_ast_theory_term {
    pub unsafe fn symbol(&mut self) -> *mut clingo_symbol_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn variable(&mut self) -> *mut *const c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn tuple(&mut self) -> *mut *const clingo_ast_theory_term_array_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn list(&mut self) -> *mut *const clingo_ast_theory_term_array_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn set(&mut self) -> *mut *const clingo_ast_theory_term_array_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn function(&mut self) -> *mut *const clingo_ast_theory_function_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn unparsed_term(&mut self) -> *mut *const clingo_ast_theory_unparsed_term_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for clingo_ast_theory_term {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_term_t = clingo_ast_theory_term;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_term_array {
    pub terms: *const clingo_ast_theory_term_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_theory_term_array {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_function {
    pub name: *const c_char,
    pub arguments: *const clingo_ast_theory_term_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_theory_function {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_unparsed_term_element {
    pub operators: *const *const c_char,
    pub size: size_t,
    pub term: clingo_ast_theory_term_t,
}
impl ::std::default::Default for clingo_ast_theory_unparsed_term_element {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_unparsed_term_element_t = clingo_ast_theory_unparsed_term_element;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_unparsed_term {
    pub elements: *const clingo_ast_theory_unparsed_term_element_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_theory_unparsed_term {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_atom_element {
    pub tuple: *const clingo_ast_theory_term_t,
    pub tuple_size: size_t,
    pub condition: *const clingo_ast_literal_t,
    pub condition_size: size_t,
}
impl ::std::default::Default for clingo_ast_theory_atom_element {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_atom_element_t = clingo_ast_theory_atom_element;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_guard {
    pub operator_name: *const c_char,
    pub term: clingo_ast_theory_term_t,
}
impl ::std::default::Default for clingo_ast_theory_guard {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_guard_t = clingo_ast_theory_guard;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_atom {
    pub term: clingo_ast_term_t,
    pub elements: *const clingo_ast_theory_atom_element_t,
    pub size: size_t,
    pub guard: *const clingo_ast_theory_guard_t,
}
impl ::std::default::Default for clingo_ast_theory_atom {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_atom_t = clingo_ast_theory_atom;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_head_literal_type {
    clingo_ast_head_literal_type_literal = 0,
    clingo_ast_head_literal_type_disjunction = 1,
    clingo_ast_head_literal_type_aggregate = 2,
    clingo_ast_head_literal_type_head_aggregate = 3,
    clingo_ast_head_literal_type_theory_atom = 4,
}
pub type clingo_ast_head_literal_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_head_literal {
    pub location: clingo_location_t,
    pub type_: clingo_ast_head_literal_type_t,
    pub _bindgen_data_1_: [u64; 1usize],
}
impl clingo_ast_head_literal {
    pub unsafe fn literal(&mut self) -> *mut *const clingo_ast_literal_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn disjunction(&mut self) -> *mut *const clingo_ast_disjunction_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn aggregate(&mut self) -> *mut *const clingo_ast_aggregate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn head_aggregate(&mut self) -> *mut *const clingo_ast_head_aggregate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn theory_atom(&mut self) -> *mut *const clingo_ast_theory_atom_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for clingo_ast_head_literal {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_head_literal_t = clingo_ast_head_literal;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_body_literal_type {
    clingo_ast_body_literal_type_literal = 0,
    clingo_ast_body_literal_type_conditional = 1,
    clingo_ast_body_literal_type_aggregate = 2,
    clingo_ast_body_literal_type_body_aggregate = 3,
    clingo_ast_body_literal_type_theory_atom = 4,
    clingo_ast_body_literal_type_disjoint = 5,
}
pub type clingo_ast_body_literal_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_body_literal {
    pub location: clingo_location_t,
    pub sign: clingo_ast_sign_t,
    pub type_: clingo_ast_body_literal_type_t,
    pub _bindgen_data_1_: [u64; 1usize],
}
impl clingo_ast_body_literal {
    pub unsafe fn literal(&mut self) -> *mut *const clingo_ast_literal_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn conditional(&mut self) -> *mut *const clingo_ast_conditional_literal_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn aggregate(&mut self) -> *mut *const clingo_ast_aggregate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn body_aggregate(&mut self) -> *mut *const clingo_ast_body_aggregate_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn theory_atom(&mut self) -> *mut *const clingo_ast_theory_atom_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn disjoint(&mut self) -> *mut *const clingo_ast_disjoint_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for clingo_ast_body_literal {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_body_literal_t = clingo_ast_body_literal;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_theory_operator_type {
    clingo_ast_theory_operator_type_unary = 0,
    clingo_ast_theory_operator_type_binary_left = 1,
    clingo_ast_theory_operator_type_binary_right = 2,
}
pub type clingo_ast_theory_operator_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_operator_definition {
    pub location: clingo_location_t,
    pub name: *const c_char,
    pub priority: ::std::os::raw::c_uint,
    pub type_: clingo_ast_theory_operator_type_t,
}
impl ::std::default::Default for clingo_ast_theory_operator_definition {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_operator_definition_t = clingo_ast_theory_operator_definition;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_term_definition {
    pub location: clingo_location_t,
    pub name: *const c_char,
    pub operators: *const clingo_ast_theory_operator_definition_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_theory_term_definition {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_term_definition_t = clingo_ast_theory_term_definition;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_guard_definition {
    pub term: *const c_char,
    pub operators: *const *const c_char,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_theory_guard_definition {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_guard_definition_t = clingo_ast_theory_guard_definition;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_theory_atom_definition_type {
    clingo_ast_theory_atom_definition_type_head = 0,
    clingo_ast_theory_atom_definition_type_body = 1,
    clingo_ast_theory_atom_definition_type_any = 2,
    clingo_ast_theory_atom_definition_type_directive = 3,
}
pub type clingo_ast_theory_atom_definition_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_atom_definition {
    pub location: clingo_location_t,
    pub type_: clingo_ast_theory_atom_definition_type_t,
    pub name: *const c_char,
    pub arity: ::std::os::raw::c_uint,
    pub elements: *const c_char,
    pub guard: *const clingo_ast_theory_guard_definition_t,
}
impl ::std::default::Default for clingo_ast_theory_atom_definition {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_atom_definition_t = clingo_ast_theory_atom_definition;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_theory_definition {
    pub name: *const c_char,
    pub terms: *const clingo_ast_theory_term_definition_t,
    pub terms_size: size_t,
    pub atoms: *const clingo_ast_theory_atom_definition_t,
    pub atoms_size: size_t,
}
impl ::std::default::Default for clingo_ast_theory_definition {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_theory_definition_t = clingo_ast_theory_definition;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_rule {
    pub head: clingo_ast_head_literal_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_rule {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_rule_t = clingo_ast_rule;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_definition {
    pub name: *const c_char,
    pub value: clingo_ast_term_t,
    pub is_default: u8,
    _bindgen_padding_0_: [u8; 7usize],
}
impl ::std::default::Default for clingo_ast_definition {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_definition_t = clingo_ast_definition;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_show_signature {
    pub signature: clingo_signature_t,
    pub csp: u8,
    _bindgen_padding_0_: [u8; 7usize],
}
impl ::std::default::Default for clingo_ast_show_signature {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_show_signature_t = clingo_ast_show_signature;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_show_term {
    pub term: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: size_t,
    pub csp: u8,
    _bindgen_padding_0_: [u8; 7usize],
}
impl ::std::default::Default for clingo_ast_show_term {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_show_term_t = clingo_ast_show_term;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_minimize {
    pub weight: clingo_ast_term_t,
    pub priority: clingo_ast_term_t,
    pub tuple: *const clingo_ast_term_t,
    pub tuple_size: size_t,
    pub body: *const clingo_ast_body_literal_t,
    pub body_size: size_t,
}
impl ::std::default::Default for clingo_ast_minimize {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_minimize_t = clingo_ast_minimize;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_script_type {
    clingo_ast_script_type_lua = 0,
    clingo_ast_script_type_python = 1,
}
pub type clingo_ast_script_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_script {
    pub type_: clingo_ast_script_type_t,
    pub code: *const c_char,
}
impl ::std::default::Default for clingo_ast_script {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_script_t = clingo_ast_script;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_program {
    pub name: *const c_char,
    pub parameters: *const clingo_ast_id_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_program {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_program_t = clingo_ast_program;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_external {
    pub atom: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_external {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_external_t = clingo_ast_external;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_edge {
    pub u: clingo_ast_term_t,
    pub v: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_edge {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_edge_t = clingo_ast_edge;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_heuristic {
    pub atom: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: size_t,
    pub bias: clingo_ast_term_t,
    pub priority: clingo_ast_term_t,
    pub modifier: clingo_ast_term_t,
}
impl ::std::default::Default for clingo_ast_heuristic {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_heuristic_t = clingo_ast_heuristic;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_project {
    pub atom: clingo_ast_term_t,
    pub body: *const clingo_ast_body_literal_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_ast_project {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_project_t = clingo_ast_project;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clingo_ast_statement_type {
    clingo_ast_statement_type_rule = 0,
    clingo_ast_statement_type_const = 1,
    clingo_ast_statement_type_show_signature = 2,
    clingo_ast_statement_type_show_term = 3,
    clingo_ast_statement_type_minimize = 4,
    clingo_ast_statement_type_script = 5,
    clingo_ast_statement_type_program = 6,
    clingo_ast_statement_type_external = 7,
    clingo_ast_statement_type_edge = 8,
    clingo_ast_statement_type_heuristic = 9,
    clingo_ast_statement_type_project_atom = 10,
    clingo_ast_statement_type_project_atom_signature = 11,
    clingo_ast_statement_type_theory_definition = 12,
}
pub type clingo_ast_statement_type_t = c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_ast_statement {
    pub location: clingo_location_t,
    pub type_: clingo_ast_statement_type_t,
    pub _bindgen_data_1_: [u64; 1usize],
}
impl clingo_ast_statement {
    pub unsafe fn rule(&mut self) -> *mut *const clingo_ast_rule_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn definition(&mut self) -> *mut *const clingo_ast_definition_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn show_signature(&mut self) -> *mut *const clingo_ast_show_signature_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn show_term(&mut self) -> *mut *const clingo_ast_show_term_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn minimize(&mut self) -> *mut *const clingo_ast_minimize_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn script(&mut self) -> *mut *const clingo_ast_script_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn program(&mut self) -> *mut *const clingo_ast_program_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn external(&mut self) -> *mut *const clingo_ast_external_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn edge(&mut self) -> *mut *const clingo_ast_edge_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn heuristic(&mut self) -> *mut *const clingo_ast_heuristic_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn project_atom(&mut self) -> *mut *const clingo_ast_project_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn project_signature(&mut self) -> *mut clingo_signature_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn theory_definition(&mut self) -> *mut *const clingo_ast_theory_definition_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for clingo_ast_statement {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_ast_statement_t = clingo_ast_statement;
pub type clingo_ast_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const clingo_ast_statement_t,
                                                 arg2: *mut c_void
)
                                                 -> u8>;
pub enum clingo_program_builder { }
pub type clingo_program_builder_t = clingo_program_builder;
pub enum clingo_control { }
pub type clingo_control_t = clingo_control;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clingo_part {
    pub name: *const c_char,
    pub params: *const clingo_symbol_t,
    pub size: size_t,
}
impl ::std::default::Default for clingo_part {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type clingo_part_t = clingo_part;
pub type clingo_symbol_callback_t =
    ::std::option::Option<unsafe extern "C" fn(symbols: *const clingo_symbol_t,
                                               symbols_size: size_t,
                                               data: *mut c_void)
                                                 -> u8>;
pub type clingo_ground_callback_t =
    ::std::option::Option<unsafe extern "C" fn(location: clingo_location_t,
                                               name: *const c_char,
                                               arguments: *const clingo_symbol_t,
                                               arguments_size: size_t,
                                               data: *mut c_void,
                                               symbol_callback: clingo_symbol_callback_t,
                                               symbol_callback_data: *mut c_void)
                              -> u8>;
pub type clingo_model_callback_t =
    ::std::option::Option<unsafe extern "C" fn(model: *mut clingo_model_t,
                                               data: *mut c_void,
                                               goon: *mut u8)
                                                 -> u8>;
pub type clingo_finish_callback_t =
    ::std::option::Option<unsafe extern "C" fn(result: clingo_solve_result_bitset_t,
                                               data: *mut c_void)
                                                 -> u8>;
#[link(name = "clingo", kind = "dylib")]
extern "C" {
    pub fn clingo_error_string(code: clingo_error_t) -> *const c_char;
    pub fn clingo_error_code() -> clingo_error_t;
    pub fn clingo_error_message() -> *const c_char;
    pub fn clingo_set_error(code: clingo_error_t, message: *const c_char);
    pub fn clingo_warning_string(code: clingo_warning_t) -> *const c_char;
    pub fn clingo_version(major: *mut c_int, minor: *mut c_int, revision: *mut c_int);
    pub fn clingo_signature_create(name: *const c_char,
                                   arity: uint32_t,
                                   positive: u8,
                                   signature: *mut clingo_signature_t)
                                   -> u8;
    pub fn clingo_signature_name(signature: clingo_signature_t) -> *const c_char;
    pub fn clingo_signature_arity(signature: clingo_signature_t) -> uint32_t;
    pub fn clingo_signature_is_positive(signature: clingo_signature_t) -> u8;
    pub fn clingo_signature_is_negative(signature: clingo_signature_t) -> u8;
    pub fn clingo_signature_is_equal_to(a: clingo_signature_t, b: clingo_signature_t) -> u8;
    pub fn clingo_signature_is_less_than(a: clingo_signature_t, b: clingo_signature_t) -> u8;
    pub fn clingo_signature_hash(signature: clingo_signature_t) -> size_t;
    pub fn clingo_symbol_create_number(number: c_int, symbol: *mut clingo_symbol_t);
    pub fn clingo_symbol_create_supremum(symbol: *mut clingo_symbol_t);
    pub fn clingo_symbol_create_infimum(symbol: *mut clingo_symbol_t);
    pub fn clingo_symbol_create_string(string: *const c_char, symbol: *mut clingo_symbol_t) -> u8;
    pub fn clingo_symbol_create_id(name: *const c_char,
                                   positive: u8,
                                   symbol: *mut clingo_symbol_t)
                                   -> u8;
    pub fn clingo_symbol_create_function(name: *const c_char,
                                         arguments: *const clingo_symbol_t,
                                         arguments_size: size_t,
                                         positive: u8,
                                         symbol: *mut clingo_symbol_t)
                                         -> u8;
    pub fn clingo_symbol_number(symbol: clingo_symbol_t, number: *mut c_int) -> u8;
    pub fn clingo_symbol_name(symbol: clingo_symbol_t, name: *mut *const c_char) -> u8;
    pub fn clingo_symbol_string(symbol: clingo_symbol_t, string: *mut *const c_char) -> u8;
    pub fn clingo_symbol_is_positive(symbol: clingo_symbol_t, positive: *mut u8) -> u8;
    pub fn clingo_symbol_is_negative(symbol: clingo_symbol_t, negative: *mut u8) -> u8;
    pub fn clingo_symbol_arguments(symbol: clingo_symbol_t,
                                   arguments: *mut *const clingo_symbol_t,
                                   arguments_size: *mut size_t)
                                   -> u8;
    pub fn clingo_symbol_type(symbol: clingo_symbol_t) -> clingo_symbol_type_t;
    pub fn clingo_symbol_to_string_size(symbol: clingo_symbol_t, size: *mut size_t) -> u8;
    pub fn clingo_symbol_to_string(symbol: clingo_symbol_t,
                                   string: *mut c_char,
                                   size: size_t)
                                   -> u8;
    pub fn clingo_symbol_is_equal_to(a: clingo_symbol_t, b: clingo_symbol_t) -> u8;
    pub fn clingo_symbol_is_less_than(a: clingo_symbol_t, b: clingo_symbol_t) -> u8;
    pub fn clingo_symbol_hash(symbol: clingo_symbol_t) -> size_t;
    pub fn clingo_add_string(string: *const c_char, result: *mut *const c_char) -> u8;
    pub fn clingo_parse_term(string: *const c_char,
                             logger: clingo_logger_t,
                             logger_data: *mut c_void,
                             message_limit: ::std::os::raw::c_uint,
                             symbol: *mut clingo_symbol_t)
                             -> u8;
    pub fn clingo_model_type(model: *mut clingo_model_t, type_: *mut clingo_model_type_t) -> u8;
    pub fn clingo_model_number(model: *mut clingo_model_t, number: *mut uint64_t) -> u8;
    pub fn clingo_model_symbols_size(model: *mut clingo_model_t,
                                     show: clingo_show_type_bitset_t,
                                     size: *mut size_t)
                                     -> u8;
    pub fn clingo_model_symbols(model: *mut clingo_model_t,
                                show: clingo_show_type_bitset_t,
                                symbols: *mut clingo_symbol_t,
                                size: size_t)
                                -> u8;
    pub fn clingo_model_contains(model: *mut clingo_model_t,
                                 atom: clingo_symbol_t,
                                 contained: *mut u8)
                                 -> u8;
    pub fn clingo_model_cost_size(model: *mut clingo_model_t, size: *mut size_t) -> u8;
    pub fn clingo_model_cost(model: *mut clingo_model_t, costs: *mut int64_t, size: size_t) -> u8;
    pub fn clingo_model_optimality_proven(model: *mut clingo_model_t, proven: *mut u8) -> u8;
    pub fn clingo_model_context(model: *mut clingo_model_t,
                                control: *mut *mut clingo_solve_control_t)
                                -> u8;
    pub fn clingo_solve_control_thread_id(control: *mut clingo_solve_control_t,
                                          id: *mut clingo_id_t)
                                          -> u8;
    pub fn clingo_solve_control_add_clause(control: *mut clingo_solve_control_t,
                                           clause: *const clingo_symbolic_literal_t,
                                           size: size_t)
                                           -> u8;
    pub fn clingo_solve_iteratively_next(handle: *mut clingo_solve_iteratively_t,
                                         model: *mut *mut clingo_model_t)
                                         -> u8;
    pub fn clingo_solve_iteratively_get(handle: *mut clingo_solve_iteratively_t,
                                        result: *mut clingo_solve_result_bitset_t)
                                        -> u8;
    pub fn clingo_solve_iteratively_close(handle: *mut clingo_solve_iteratively_t) -> u8;
    pub fn clingo_solve_async_get(handle: *mut clingo_solve_async_t,
                                  result: *mut clingo_solve_result_bitset_t)
                                  -> u8;
    pub fn clingo_solve_async_wait(handle: *mut clingo_solve_async_t,
                                   timeout: f64,
                                   result: *mut u8)
                                   -> u8;
    pub fn clingo_solve_async_cancel(handle: *mut clingo_solve_async_t) -> u8;
    pub fn clingo_symbolic_atoms_size(atoms: *mut clingo_symbolic_atoms_t,
                                      size: *mut size_t)
                                      -> u8;
    pub fn clingo_symbolic_atoms_begin(atoms: *mut clingo_symbolic_atoms_t,
                                       signature: *const clingo_signature_t,
                                       iterator: *mut clingo_symbolic_atom_iterator_t)
                                       -> u8;
    pub fn clingo_symbolic_atoms_end(atoms: *mut clingo_symbolic_atoms_t,
                                     iterator: *mut clingo_symbolic_atom_iterator_t)
                                     -> u8;
    pub fn clingo_symbolic_atoms_find(atoms: *mut clingo_symbolic_atoms_t,
                                      symbol: clingo_symbol_t,
                                      iterator: *mut clingo_symbolic_atom_iterator_t)
                                      -> u8;
    pub fn clingo_symbolic_atoms_iterator_is_equal_to(atoms: *mut clingo_symbolic_atoms_t,
                                                      a: clingo_symbolic_atom_iterator_t,
                                                      b: clingo_symbolic_atom_iterator_t,
                                                      equal: *mut u8)
                                                      -> u8;
    pub fn clingo_symbolic_atoms_symbol(atoms: *mut clingo_symbolic_atoms_t,
                                        iterator: clingo_symbolic_atom_iterator_t,
                                        symbol: *mut clingo_symbol_t)
                                        -> u8;
    pub fn clingo_symbolic_atoms_is_fact(atoms: *mut clingo_symbolic_atoms_t,
                                         iterator: clingo_symbolic_atom_iterator_t,
                                         fact: *mut u8)
                                         -> u8;
    pub fn clingo_symbolic_atoms_is_external(atoms: *mut clingo_symbolic_atoms_t,
                                             iterator: clingo_symbolic_atom_iterator_t,
                                             external: *mut u8)
                                             -> u8;
    pub fn clingo_symbolic_atoms_literal(atoms: *mut clingo_symbolic_atoms_t,
                                         iterator: clingo_symbolic_atom_iterator_t,
                                         literal: *mut clingo_literal_t)
                                         -> u8;
    pub fn clingo_symbolic_atoms_signatures_size(atoms: *mut clingo_symbolic_atoms_t,
                                                 size: *mut size_t)
                                                 -> u8;
    pub fn clingo_symbolic_atoms_signatures(atoms: *mut clingo_symbolic_atoms_t,
                                            signatures: *mut clingo_signature_t,
                                            size: size_t)
                                            -> u8;
    pub fn clingo_symbolic_atoms_next(atoms: *mut clingo_symbolic_atoms_t,
                                      iterator: clingo_symbolic_atom_iterator_t,
                                      next: *mut clingo_symbolic_atom_iterator_t)
                                      -> u8;
    pub fn clingo_symbolic_atoms_is_valid(atoms: *mut clingo_symbolic_atoms_t,
                                          iterator: clingo_symbolic_atom_iterator_t,
                                          valid: *mut u8)
                                          -> u8;
    pub fn clingo_theory_atoms_term_type(atoms: *mut clingo_theory_atoms_t,
                                         term: clingo_id_t,
                                         type_: *mut clingo_theory_term_type_t)
                                         -> u8;
    pub fn clingo_theory_atoms_term_number(atoms: *mut clingo_theory_atoms_t,
                                           term: clingo_id_t,
                                           number: *mut c_int)
                                           -> u8;
    pub fn clingo_theory_atoms_term_name(atoms: *mut clingo_theory_atoms_t,
                                         term: clingo_id_t,
                                         name: *mut *const c_char)
                                         -> u8;
    pub fn clingo_theory_atoms_term_arguments(atoms: *mut clingo_theory_atoms_t,
                                              term: clingo_id_t,
                                              arguments: *mut *const clingo_id_t,
                                              size: *mut size_t)
                                              -> u8;
    pub fn clingo_theory_atoms_term_to_string_size(atoms: *mut clingo_theory_atoms_t,
                                                   term: clingo_id_t,
                                                   size: *mut size_t)
                                                   -> u8;
    pub fn clingo_theory_atoms_term_to_string(atoms: *mut clingo_theory_atoms_t,
                                              term: clingo_id_t,
                                              string: *mut c_char,
                                              size: size_t)
                                              -> u8;
    pub fn clingo_theory_atoms_element_tuple(atoms: *mut clingo_theory_atoms_t,
                                             element: clingo_id_t,
                                             tuple: *mut *const clingo_id_t,
                                             size: *mut size_t)
                                             -> u8;
    pub fn clingo_theory_atoms_element_condition(atoms: *mut clingo_theory_atoms_t,
                                                 element: clingo_id_t,
                                                 condition: *mut *const clingo_literal_t,
                                                 size: *mut size_t)
                                                 -> u8;
    pub fn clingo_theory_atoms_element_condition_id(atoms: *mut clingo_theory_atoms_t,
                                                    element: clingo_id_t,
                                                    condition: *mut clingo_literal_t)
                                                    -> u8;
    pub fn clingo_theory_atoms_element_to_string_size(atoms: *mut clingo_theory_atoms_t,
                                                      element: clingo_id_t,
                                                      size: *mut size_t)
                                                      -> u8;
    pub fn clingo_theory_atoms_element_to_string(atoms: *mut clingo_theory_atoms_t,
                                                 element: clingo_id_t,
                                                 string: *mut c_char,
                                                 size: size_t)
                                                 -> u8;
    pub fn clingo_theory_atoms_size(atoms: *mut clingo_theory_atoms_t, size: *mut size_t) -> u8;
    pub fn clingo_theory_atoms_atom_term(atoms: *mut clingo_theory_atoms_t,
                                         atom: clingo_id_t,
                                         term: *mut clingo_id_t)
                                         -> u8;
    pub fn clingo_theory_atoms_atom_elements(atoms: *mut clingo_theory_atoms_t,
                                             atom: clingo_id_t,
                                             elements: *mut *const clingo_id_t,
                                             size: *mut size_t)
                                             -> u8;
    pub fn clingo_theory_atoms_atom_has_guard(atoms: *mut clingo_theory_atoms_t,
                                              atom: clingo_id_t,
                                              has_guard: *mut u8)
                                              -> u8;
    pub fn clingo_theory_atoms_atom_guard(atoms: *mut clingo_theory_atoms_t,
                                          atom: clingo_id_t,
                                          connective: *mut *const c_char,
                                          term: *mut clingo_id_t)
                                          -> u8;
    pub fn clingo_theory_atoms_atom_literal(atoms: *mut clingo_theory_atoms_t,
                                            atom: clingo_id_t,
                                            literal: *mut clingo_literal_t)
                                            -> u8;
    pub fn clingo_theory_atoms_atom_to_string_size(atoms: *mut clingo_theory_atoms_t,
                                                   atom: clingo_id_t,
                                                   size: *mut size_t)
                                                   -> u8;
    pub fn clingo_theory_atoms_atom_to_string(atoms: *mut clingo_theory_atoms_t,
                                              atom: clingo_id_t,
                                              string: *mut c_char,
                                              size: size_t)
                                              -> u8;
    pub fn clingo_propagate_init_solver_literal(init: *mut clingo_propagate_init_t,
                                                aspif_literal: clingo_literal_t,
                                                solver_literal: *mut clingo_literal_t)
                                                -> u8;
    pub fn clingo_propagate_init_add_watch(init: *mut clingo_propagate_init_t,
                                           solver_literal: clingo_literal_t)
                                           -> u8;
    pub fn clingo_propagate_init_symbolic_atoms(init: *mut clingo_propagate_init_t,
                                                atoms: *mut *mut clingo_symbolic_atoms_t)
                                                -> u8;
    pub fn clingo_propagate_init_theory_atoms(init: *mut clingo_propagate_init_t,
                                              atoms: *mut *mut clingo_theory_atoms_t)
                                              -> u8;
    pub fn clingo_propagate_init_number_of_threads(init: *mut clingo_propagate_init_t) -> c_int;
    pub fn clingo_assignment_decision_level(assignment: *mut clingo_assignment_t) -> uint32_t;
    pub fn clingo_assignment_has_conflict(assignment: *mut clingo_assignment_t) -> u8;
    pub fn clingo_assignment_has_literal(assignment: *mut clingo_assignment_t,
                                         literal: clingo_literal_t)
                                         -> u8;
    pub fn clingo_assignment_level(assignment: *mut clingo_assignment_t,
                                   literal: clingo_literal_t,
                                   level: *mut uint32_t)
                                   -> u8;
    pub fn clingo_assignment_decision(assignment: *mut clingo_assignment_t,
                                      level: uint32_t,
                                      literal: *mut clingo_literal_t)
                                      -> u8;
    pub fn clingo_assignment_is_fixed(assignment: *mut clingo_assignment_t,
                                      literal: clingo_literal_t,
                                      is_fixed: *mut u8)
                                      -> u8;
    pub fn clingo_assignment_is_true(assignment: *mut clingo_assignment_t,
                                     literal: clingo_literal_t,
                                     is_true: *mut u8)
                                     -> u8;
    pub fn clingo_assignment_is_false(assignment: *mut clingo_assignment_t,
                                      literal: clingo_literal_t,
                                      is_false: *mut u8)
                                      -> u8;
    pub fn clingo_assignment_truth_value(assignment: *mut clingo_assignment_t,
                                         literal: clingo_literal_t,
                                         value: *mut clingo_truth_value_t)
                                         -> u8;
    pub fn clingo_propagate_control_thread_id(control: *mut clingo_propagate_control_t)
                                              -> clingo_id_t;
    pub fn clingo_propagate_control_assignment(control: *mut clingo_propagate_control_t)
                                               -> *mut clingo_assignment_t;
    pub fn clingo_propagate_control_add_clause(control: *mut clingo_propagate_control_t,
                                               clause: *const clingo_literal_t,
                                               size: size_t,
                                               type_: clingo_clause_type_t,
                                               result: *mut u8)
                                               -> u8;
    pub fn clingo_propagate_control_propagate(control: *mut clingo_propagate_control_t,
                                              result: *mut u8)
                                              -> u8;
    pub fn clingo_backend_rule(backend: *mut clingo_backend_t,
                               choice: u8,
                               head: *const clingo_atom_t,
                               head_size: size_t,
                               body: *const clingo_literal_t,
                               body_size: size_t)
                               -> u8;
    pub fn clingo_backend_weight_rule(backend: *mut clingo_backend_t,
                                      choice: u8,
                                      head: *const clingo_atom_t,
                                      head_size: size_t,
                                      lower_bound: clingo_weight_t,
                                      body: *const clingo_weighted_literal_t,
                                      body_size: size_t)
                                      -> u8;
    pub fn clingo_backend_minimize(backend: *mut clingo_backend_t,
                                   priority: clingo_weight_t,
                                   literals: *const clingo_weighted_literal_t,
                                   size: size_t)
                                   -> u8;
    pub fn clingo_backend_project(backend: *mut clingo_backend_t,
                                  atoms: *const clingo_atom_t,
                                  size: size_t)
                                  -> u8;
    pub fn clingo_backend_external(backend: *mut clingo_backend_t,
                                   atom: clingo_atom_t,
                                   type_: clingo_external_type_t)
                                   -> u8;
    pub fn clingo_backend_assume(backend: *mut clingo_backend_t,
                                 literals: *const clingo_literal_t,
                                 size: size_t)
                                 -> u8;
    pub fn clingo_backend_heuristic(backend: *mut clingo_backend_t,
                                    atom: clingo_atom_t,
                                    type_: clingo_heuristic_type_t,
                                    bias: c_int,
                                    priority: ::std::os::raw::c_uint,
                                    condition: *const clingo_literal_t,
                                    size: size_t)
                                    -> u8;
    pub fn clingo_backend_acyc_edge(backend: *mut clingo_backend_t,
                                    node_u: c_int,
                                    node_v: c_int,
                                    condition: *const clingo_literal_t,
                                    size: size_t)
                                    -> u8;
    pub fn clingo_backend_add_atom(backend: *mut clingo_backend_t, atom: *mut clingo_atom_t) -> u8;
    pub fn clingo_configuration_root(configuration: *mut clingo_configuration_t,
                                     key: *mut clingo_id_t)
                                     -> u8;
    pub fn clingo_configuration_type(configuration: *mut clingo_configuration_t,
                                     key: clingo_id_t,
                                     type_: *mut clingo_configuration_type_bitset_t)
                                     -> u8;
    pub fn clingo_configuration_description(configuration: *mut clingo_configuration_t,
                                            key: clingo_id_t,
                                            description: *mut *const c_char)
                                            -> u8;
    pub fn clingo_configuration_array_size(configuration: *mut clingo_configuration_t,
                                           key: clingo_id_t,
                                           size: *mut size_t)
                                           -> u8;
    pub fn clingo_configuration_array_at(configuration: *mut clingo_configuration_t,
                                         key: clingo_id_t,
                                         offset: size_t,
                                         subkey: *mut clingo_id_t)
                                         -> u8;
    pub fn clingo_configuration_map_size(configuration: *mut clingo_configuration_t,
                                         key: clingo_id_t,
                                         size: *mut size_t)
                                         -> u8;
    pub fn clingo_configuration_map_subkey_name(configuration: *mut clingo_configuration_t,
                                                key: clingo_id_t,
                                                offset: size_t,
                                                name: *mut *const c_char)
                                                -> u8;
    pub fn clingo_configuration_map_at(configuration: *mut clingo_configuration_t,
                                       key: clingo_id_t,
                                       name: *const c_char,
                                       subkey: *mut clingo_id_t)
                                       -> u8;
    pub fn clingo_configuration_value_is_assigned(configuration: *mut clingo_configuration_t,
                                                  key: clingo_id_t,
                                                  assigned: *mut u8)
                                                  -> u8;
    pub fn clingo_configuration_value_get_size(configuration: *mut clingo_configuration_t,
                                               key: clingo_id_t,
                                               size: *mut size_t)
                                               -> u8;
    pub fn clingo_configuration_value_get(configuration: *mut clingo_configuration_t,
                                          key: clingo_id_t,
                                          value: *mut c_char,
                                          size: size_t)
                                          -> u8;
    pub fn clingo_configuration_value_set(configuration: *mut clingo_configuration_t,
                                          key: clingo_id_t,
                                          value: *const c_char)
                                          -> u8;
    pub fn clingo_statistics_root(statistics: *mut clingo_statistics_t, key: *mut uint64_t) -> u8;
    pub fn clingo_statistics_type(statistics: *mut clingo_statistics_t,
                                  key: uint64_t,
                                  type_: *mut clingo_statistics_type_t)
                                  -> u8;
    pub fn clingo_statistics_array_size(statistics: *mut clingo_statistics_t,
                                        key: uint64_t,
                                        size: *mut size_t)
                                        -> u8;
    pub fn clingo_statistics_array_at(statistics: *mut clingo_statistics_t,
                                      key: uint64_t,
                                      offset: size_t,
                                      subkey: *mut uint64_t)
                                      -> u8;
    pub fn clingo_statistics_map_size(statistics: *mut clingo_statistics_t,
                                      key: uint64_t,
                                      size: *mut size_t)
                                      -> u8;
    pub fn clingo_statistics_map_subkey_name(statistics: *mut clingo_statistics_t,
                                             key: uint64_t,
                                             offset: size_t,
                                             name: *mut *const c_char)
                                             -> u8;
    pub fn clingo_statistics_map_at(statistics: *mut clingo_statistics_t,
                                    key: uint64_t,
                                    name: *const c_char,
                                    subkey: *mut uint64_t)
                                    -> u8;
    pub fn clingo_statistics_value_get(statistics: *mut clingo_statistics_t,
                                       key: uint64_t,
                                       value: *mut f64)
                                       -> u8;
    pub fn clingo_parse_program(program: *const c_char,
                                callback: clingo_ast_callback_t,
                                callback_data: *mut c_void,
                                logger: clingo_logger_t,
                                logger_data: *mut c_void,
                                message_limit: ::std::os::raw::c_uint)
                                -> u8;
    pub fn clingo_program_builder_begin(builder: *mut clingo_program_builder_t) -> u8;
    pub fn clingo_program_builder_add(builder: *mut clingo_program_builder_t,
                                      statement: *const clingo_ast_statement_t)
                                      -> u8;
    pub fn clingo_program_builder_end(builder: *mut clingo_program_builder_t) -> u8;
    pub fn clingo_control_new(arguments: *const *const c_char,
                              arguments_size: size_t,
                              logger: clingo_logger_t,
                              logger_data: *mut c_void,
                              message_limit: ::std::os::raw::c_uint,
                              control: *mut *mut clingo_control_t)
                              -> u8;
    pub fn clingo_control_free(control: *mut clingo_control_t);
    pub fn clingo_control_load(control: *mut clingo_control_t, file: *const c_char) -> u8;
    pub fn clingo_control_add(control: *mut clingo_control_t,
                              name: *const c_char,
                              parameters: *const *const c_char,
                              parameters_size: size_t,
                              program: *const c_char)
                              -> u8;
    pub fn clingo_control_ground(control: *mut clingo_control_t,
                                 parts: *const clingo_part_t,
                                 parts_size: size_t,
                                 ground_callback: clingo_ground_callback_t,
                                 ground_callback_data: *mut c_void)
                                 -> u8;
    pub fn clingo_control_solve(control: *mut clingo_control_t,
                                model_callback: clingo_model_callback_t,
                                model_callback_data: *mut c_void,
                                assumptions: *const clingo_symbolic_literal_t,
                                assumptions_size: size_t,
                                result: *mut clingo_solve_result_bitset_t)
                                -> u8;
    pub fn clingo_control_solve_iteratively(control: *mut clingo_control_t,
                                            assumptions: *const clingo_symbolic_literal_t,
                                            assumptions_size: size_t,
                                            handle: *mut *mut clingo_solve_iteratively_t)
                                            -> u8;
    pub fn clingo_control_solve_async(control: *mut clingo_control_t,
                                      model_callback: clingo_model_callback_t,
                                      model_callback_data: *mut c_void,
                                      finish_callback: clingo_finish_callback_t,
                                      finish_callback_data: *mut c_void,
                                      assumptions: *const clingo_symbolic_literal_t,
                                      assumptions_size: size_t,
                                      handle: *mut *mut clingo_solve_async_t)
                                      -> u8;
    pub fn clingo_control_cleanup(control: *mut clingo_control_t) -> u8;
    pub fn clingo_control_assign_external(control: *mut clingo_control_t,
                                          atom: clingo_symbol_t,
                                          value: clingo_truth_value_t)
                                          -> u8;
    pub fn clingo_control_release_external(control: *mut clingo_control_t,
                                           atom: clingo_symbol_t)
                                           -> u8;
    pub fn clingo_control_register_propagator(control: *mut clingo_control_t,
                                              propagator: clingo_propagator_t,
                                              data: *mut c_void,
                                              sequential: u8)
                                              -> u8;
    pub fn clingo_control_statistics(control: *mut clingo_control_t,
                                     statistics: *mut *mut clingo_statistics_t)
                                     -> u8;
    pub fn clingo_control_interrupt(control: *mut clingo_control_t);
    pub fn clingo_control_configuration(control: *mut clingo_control_t,
                                        configuration: *mut *mut clingo_configuration_t)
                                       -> u8;
    pub fn clingo_control_use_enumeration_assumption(control: *mut clingo_control_t,
                                                     enable: u8)
                                                    -> u8;
    pub fn clingo_control_get_const(control: *mut clingo_control_t,
                                    name: *const c_char,
                                    symbol: *mut clingo_symbol_t)
                                   -> u8;
    pub fn clingo_control_has_const(control: *mut clingo_control_t,
                                    name: *const c_char,
                                    exists: *mut u8)
                                   -> u8;
    pub fn clingo_control_symbolic_atoms(control: *mut clingo_control_t,
                                         atoms: *mut *mut clingo_symbolic_atoms_t)
                                        -> u8;
    pub fn clingo_control_theory_atoms(control: *mut clingo_control_t,
                                       atoms: *mut *mut clingo_theory_atoms_t)
                                      -> u8;
    pub fn clingo_control_backend(control: *mut clingo_control_t,
                                  backend: *mut *mut clingo_backend_t)
                                  -> u8;
    pub fn clingo_control_program_builder(control: *mut clingo_control_t,
                                          builder: *mut *mut clingo_program_builder_t)
                                         -> u8;
}
